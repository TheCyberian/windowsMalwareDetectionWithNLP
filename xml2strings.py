"""
Write a piece of code to first look for all 'strings.xml' files in the decompiled folder
Extract Strings from the each strings.xml and save it with a filename label.
Malicious or benign; based on the folder it was found under
Next Step ->
Then call the `vectorize_text_files_in_path` function
"""
import subprocess
import re
from xml.etree import ElementTree


def extract_name_attribute_from_xml(xml_string):
    tree_root = ElementTree.fromstring(xml_string)
    strings_in_file = []
    for element in tree_root.iter('string'):
        strings_in_file.append(element.attrib.get('name'))
    return strings_in_file


output_path = 'extracted_features/xml2txt/'

cmd_out: bytes = subprocess.run(
    'find /home/cyberian/PycharmProjects/androidFeatureExtraction/apks/decompiled/ -type f -name "strings.xml"',
    shell=True,
    capture_output=True,
    text=True,
    check=True).stdout.split('\n')

apk_names_list = []
for index, file_path in enumerate(cmd_out):
    if len(file_path) > 0:
        pattern = "\/\w+\/\w+\/\w+\/\w+\/\w+\/\w+\/\w+\/\w+"
        file_name = re.search(pattern, file_path).group(0)
        apk_names_list.append(file_name)
    else:
        print("Probably the end of list!")

unique_file_names = set(apk_names_list)

for index, apk in enumerate(unique_file_names):
    name = re.search('(\w+)$|(\w)+(.apk)$', apk).group(0)
    print(index, name)
    unique_strings_in_apk = set()
    for file_path in cmd_out:
        if apk in file_path:
            # print(file_path)
            # Write the list to file named with regex
            with open(file_path, 'r') as strings_xml:
                data = strings_xml.read()
                strings = extract_name_attribute_from_xml(data)
                unique_strings_in_apk.update(strings)
            cmd_out.remove(file_path)

    print(unique_strings_in_apk)

    with open(output_path + name + '.txt', 'a+') as f:
        for line in unique_strings_in_apk:
            f.write(line)
            f.write('\n')
