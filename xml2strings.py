"""
Write a piece of code to first look for all 'strings.xml' files in the decompiled folder
Extract Strings from the each strings.xml and save it with a filename label.
Malicious or benign; based on the folder it was found under
Next Step ->
Then call the `vectorize_text_files_in_path` function
"""
# Using RegEx look for file name; then keeping that as a check on every loop of next step
# LOOP
# Check for file name again; if doesn't match change
# Use any XML library to parse and read and extract all the strings from each file
# Or extract name parameter from the XMLs; it's repeated so make sure you look for unique values only in each XML
# Extract and save all in one file.
# END LOOP
#
import subprocess
from xml.etree import ElementTree
import re

decompiled_files_path = '/home/cyberian/PycharmProjects/androidFeatureExtraction/apks/decompiled'

cmd_out: bytes = subprocess.run(
    'find /home/cyberian/PycharmProjects/androidFeatureExtraction/apks/decompiled/ -type f -name "strings.xml"',
    shell=True,
    capture_output=True,
    text=True,
    check=True).stdout.split('\n')

# cmd_out = subprocess.check_output(
#     'find /home/cyberian/PycharmProjects/androidFeatureExtraction/apks/decompiled/ -type f -name "strings.xml"',
#     stderr=subprocess.STDOUT,
#     shell=True
# )
#
# print(cmd_out)


# print(len(cmd_out))

def extract_name_attribute_from_xml(xml_string):
    tree_root = ElementTree.fromstring(xml_string)
    strings_in_file = []
    for element in tree_root.iter('string'):
        # print(element.attrib.get('name'))
        strings_in_file.append(element.attrib.get('name'))
    return strings_in_file


for file_path in cmd_out:
    if len(file_path) > 0:
        pattern = "\/\w+\/\w+\/\w+\/\w+\/\w+\/\w+\/\w+\/\w+"
        file_name = re.search(pattern, file_path).group(0)
        while file_name in file_path:
            unique_strings = set()
            with open(file_path, 'r') as strings_xml:
                data = strings_xml.read()
                strings = extract_name_attribute_from_xml(data)
                unique_strings.add(strings)
            break
        # break
    else:
        pass
